import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
    }
}

apply plugin: 'com.android.application'
apply from: '../config/properties-util.gradle'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':aspect')
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "API_SERVER_URL", '"https://www.oschina.net/;http://192.168.1.85:9090/"')
    }

    // rename the apk with the version name
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent + "/${variant.buildType.name}",
                    "osc-android-${variant.versionName}-${variant.productFlavors[0].name}-${variant.buildType.name}.apk".toLowerCase())
        }
    }

    //signing files settings
    signingConfigs {
        if (propertyHaveSigningConfigs) {
            debug {
                storeFile file(propertyStoreFileStr)
                storePassword propertyStorePwdStr
                keyAlias propertyKeyAliasStr
                keyPassword propertyKeyPwdStr
            }

            release {
                storeFile file(propertyStoreFileStr)
                storePassword propertyStorePwdStr
                keyAlias propertyKeyAliasStr
                keyPassword propertyKeyPwdStr
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    // 移除lint检查的error
    lintOptions {
        abortOnError false
    }

    //build type setting
    buildTypes {

        debug {
            zipAlignEnabled false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (propertyHaveSigningConfigs)
                signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            if (propertyHaveSigningConfigs)
                signingConfig signingConfigs.release
        }
    }

    //product flavors
    productFlavors {
        oschina {
            manifestPlaceholders = [UMENG_CHANNEL: "oschina"]
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    if (propertyHaveDebugCompile) {
        maven {
            url propertyDebugCompileUrl
        }
    }
}

dependencies {
    compile "com.android.support:support-v4:$rootProject.ext.supportVersion"
    compile "com.android.support:appcompat-v7:$rootProject.ext.supportVersion"
    compile "com.android.support:design:$rootProject.ext.supportVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.supportVersion"
    compile "com.android.support:cardview-v7:$rootProject.ext.supportVersion"

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':open')


    if (propertyHaveDebugCompile) {
        compile propertyDebugCompile
    }

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile 'com.github.chrisbanes.photoview:library:1.2.4'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.google.zxing:core:3.3.0'
    compile 'com.joanzapata.android:android-iconify:1.0.9'
    compile 'com.makeramen:roundedimageview:2.1.1'
    compile 'pub.devrel:easypermissions:0.3.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'net.oschina.common:common:0.1.6'
    compile 'com.belerweb:pinyin4j:2.5.1'
    testCompile 'junit:junit:4.12'
}


apply plugin: 'com.getkeepsafe.dexcount'

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
